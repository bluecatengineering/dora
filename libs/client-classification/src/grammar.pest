// integer = @{ ASCII_DIGIT+ }
integer    =  @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }

string = @{ "'" ~ ( "''" | (!"'" ~ ANY) )* ~ "'" }

ip = @{ ASCII_DIGIT{1,3} ~ "." ~ ASCII_DIGIT{1,3} ~ "." ~ ASCII_DIGIT{1,3} ~ "." ~ ASCII_DIGIT{1,3} }

hex = @{ "0x" ~ ASCII_HEX_DIGIT* }

boolean = @{ "true" | "false" }

operation = _{ equal | neq | and | or }
	equal = { "==" }
	neq = { "!=" }
	or = { "or" }
	and = { "and" }


option = { "option[" ~ integer ~ "]" }
relay = { "relay4[" ~ integer ~ "]" }
member = { "member(" ~ string ~ ")" }

pkt = _{ 
    pkt_mac
    | pkt_hlen
    | pkt_htype
    | pkt_ciaddr
    | pkt_giaddr
    | pkt_yiaddr
    | pkt_siaddr
    | pkt_msgtype
    | pkt_transid
}
    pkt_mac = @{ "pkt4.mac" }
    pkt_hlen = @{ "pkt4.hlen" }
    pkt_htype = @{ "pkt4.htype" }
    pkt_ciaddr = @{ "pkt4.ciaddr" }
    pkt_giaddr = @{ "pkt4.giaddr" }
    pkt_yiaddr = @{ "pkt4.yiaddr" }
    pkt_siaddr = @{ "pkt4.siaddr" }
    pkt_msgtype = @{ "pkt4.msgtype" }
    pkt_transid = @{ "pkt4.transid" }

substring = { "substring(" ~ expr ~ "," ~ integer ~ "," ~ integer ~ ")" }
concat = { "concat(" ~ expr ~ "," ~ expr ~ ")" }

expr = { prefix* ~ primary ~ postfix* ~ (operation ~ prefix* ~ primary ~ postfix* )* }

prefix = _{ not }
    not = { "not" } 

postfix  =  _{ to_hex | exists | sub_opt }
    to_hex    =   { ".hex" } 
    exists    =   { ".exists" } 
    sub_opt    =   { "." ~ option } 

primary = _{ hex | ip | integer | string | boolean | option | relay | pkt | substring | concat | member | "(" ~ expr ~ ")" }
predicate = _{ SOI ~ expr ~ EOI }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
